security:
    role_hierarchy:
        ROLE_USER: []

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_provider:
            entity:
                class: App\Entity\User

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt))/
            security: false
        main:
            lazy: true
            provider: user_provider
            user_checker: App\Security\UserChecker
            json_login:
                check_path: security_user_login
                username_path: email
                password_path: password
                success_handler: api_authentication_success_handler
            logout:
                path: /security/logout
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                secure: true
            two_factor:
                check_path: 2fa_login_check
                prepare_on_login: true
                prepare_on_access_denied: true
                authentication_required_handler: api_2fa_required_handler
                success_handler: api_2fa_authentication_success_handler
                failure_handler: api_2fa_failure_handler

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/security/login, roles: PUBLIC_ACCESS }
        - { path: ^/security/reset-password, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
